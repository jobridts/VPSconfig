<IfModule mod_ssl.c>
{% for host in apache_hosts %}
    {% if host.ssl == "yes" %}

    {# _default_ is used with IP virtual hosting to catch unmatched IP addresses #}
    <VirtualHost _default_:8443>
        ServerAdmin {{ apache_server_admin }}

        DocumentRoot {{ apache_document_root }}/default

        ErrorLog {{ apache_log_dir }}/default-ssl.error.log
        CustomLog {{ apache_log_dir }}/default-ssl.access.log combined

        {#   Enable SSL for this virtual host. #}
        SSLEngine on

        {# 
         # A self-signed (snakeoil) certificate can be created by installing the
         # ssl-cert package. See /usr/share/doc/apache2/README.Debian.gz for
         # more info. If both key and certificate are stored in the same file,
         # only the SSLCertificateFile directive is needed.
         #}
        SSLCertificateFile    /etc/ssl/certs/ssl-cert-snakeoil.pem
        SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key

        {#
         # StdEnvVars:
         # This exports the standard SSL/TLS related `SSL_*' environment 
         # variables. Per default this exportation is switched off for
         # performance reasons, because the extraction step is an expensive
         # operation and is usually useless for serving static content. So one
         # usually enables the exportation for CGI and SSI requests only.
         #}
        <FilesMatch "\.(cgi|shtml|phtml|php)$">
                SSLOptions +StdEnvVars
        </FilesMatch>
        <Directory /usr/lib/cgi-bin>
                SSLOptions +StdEnvVars
        </Directory>
        {#
         # SSL Protocol Adjustments:
         # The safe and default but still SSL/TLS standard compliant shutdown
         # approach is that mod_ssl sends the close notify alert but doesn't
         # wait for the close notify alert from client. When you need a
         # different shutdown approach you can use one of the following
         # variables:
         # - ssl-unclean-shutdown:
         #   This forces an unclean shutdown when the connection is closed, i.e.
         #   no SSL close notify alert is send or allowed to received.  This
         #   violates the SSL/TLS standard but is needed for some brain-dead
         #   browsers. Use this when you receive I/O errors because of the
         #   standard approach where mod_ssl sends the close notify alert.
         # - ssl-accurate-shutdown:
         #   This forces an accurate shutdown when the connection is closed,
         #   i.e. a SSL close notify alert is send and mod_ssl waits for the
         #   close notify alert of the client. This is 100% SSL/TLS standard 
         #   compliant, but in practice often causes hanging connections with
         #   brain-dead browsers. Use this only for browsers where you know that
         #   their SSL implementation works correctly.
         #   Notice: Most problems of broken clients are also related to the
         #   HTTP keep-alive facility, so you usually additionally want to 
         #   disable keep-alive for those clients, too. Use variable
         #   "nokeepalive" for this. Similarly, one has to force some clients to
         #   use HTTP/1.0 to workaround their broken HTTP/1.1 implementation.
         #   Use variables "downgrade-1.0" and "force-response-1.0" for this.
         #}
        BrowserMatch "MSIE [2-6]" \
                nokeepalive ssl-unclean-shutdown \
                downgrade-1.0 force-response-1.0
        {# MSIE 7 and newer should be able to use keepalive #}
        BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
    </VirtualHost>
    {% endif %}
{% endfor %}
</IfModule>
